@using hlcWeb.Models
@model hlcWeb.Models.Presentation

@{
    var action = (Model.Id == 0) ? "Add" : "Edit";
    ViewBag.Title = $"{action} Case File";
    var hlcList = ((SelectList) ViewBag.UserSelectList).ToList();
}

<div class="well">
    <i class="fa fa-bar-chart fa-2x fa-fw text-primary"></i><span class="h3"> @action Presentation</span>
</div>
<div class="container">
    @using (Html.BeginForm("Edit", "Presentations", FormMethod.Post, new {@class = "form-horizontal"}))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.DateEntered)
        @Html.HiddenFor(m => m.EnteredBy)
        @Html.HiddenFor(m => m.DateLastUpdated)
        @Html.HiddenFor(m => m.LastUpdatedBy)

        if (action == "Add")
        {
            <div class="alert alert-info" role="alert">
                Enter the basic details for this presentation below.  Once this information is entered, you will
                be able to edit the Goals, Notes etc when you view the presentation.
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(m => m.Description, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Description)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DatePlanned, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.EditorFor(m => m.DatePlanned, new { type = "date", @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(m => m.DatePlanned)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DatePreparation, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.EditorFor(m => m.DatePreparation, new { type = "date", @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(m => m.DatePreparation)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CoordinatorId, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.CoordinatorId, (SelectList) ViewBag.UserSelectList, "(Select coordinating HLC Member)", new { @class = "form-control", style = "max-width:100%;" })
                @Html.ValidationMessageFor(m => m.CoordinatorId)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.HLCAssigned, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-9">
                @Html.TextAreaFor(m => m.HLCAssigned, new { @class = "form-control", @readonly = "true" })                
            </div>
            <div class="col-sm-1">
                <button type="button" class="btn btn-sm btn-primary" data-toggle="collapse" data-target="#HLCAssignedDiv">Select...</button>
            </div>
            <div id="HLCAssignedDiv" class="collapsed collapse">
                <div class="col-sm-2"></div>
                <div class="col-sm-10">
                        @for (int i = 0; i < hlcList.Count; i=i+2)
                        {
                            <div class="col-sm-5">
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="HLCAssignedChk" value="@hlcList[i].Text" />
                                        @hlcList[i].Text
                                    </label>
                                </div>
                            </div>
                            <div class="col-sm-5">
                                @if ((i+1) < hlcList.Count) { 
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="HLCAssignedChk" value="@hlcList[i + 1].Text"/>
                                        @hlcList[i + 1].Text
                                    </label>
                                </div>
                                }
                            </div>
                        }                       
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PresentationFacilityType, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.EnumDropDownListFor(m => m.PresentationFacilityType, optionLabel: "Select...", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PresentationFacilityType)
            </div>
        </div>
        <div id="PracticeIdDiv" class="form-group">
            @Html.LabelFor(m => m.PracticeId, "Practice/Facility", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.PracticeId, (SelectList) ViewBag.PracticeSelectList, "Select Practice/Facility...", new {@class = "form-control", style = "max-width:100%;"})
                @Html.ValidationMessageFor(m => m.PracticeId)
            </div>
        </div>
        <div id="HospitalIdDiv" class="form-group">
            @Html.LabelFor(m => m.HospitalId, "Hospital", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.HospitalId, (SelectList) ViewBag.HospitalSelectList, "Select Hospital...", new { @class = "form-control", style = "max-width:100%;" })
                @Html.ValidationMessageFor(m => m.HospitalId)
            </div>
        </div>
        <div class="form-group hlc-control">
            @Html.LabelFor(m => m.DepartmentId, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.DepartmentId, (SelectList) ViewBag.DepartmentsSelectList, "(Select Department to be presented to)", new { @class = "form-control", style = "max-width:100%;" })
                @Html.ValidationMessageFor(m => m.DepartmentId)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-2 control-label">New Department: </div>
            <div class="col-sm-8">
                @Html.TextBoxFor(m => m.NewDepartment, new { @class = "form-control", disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactName, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactName, new { @class = "form-control" })<br />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactTitle, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactTitle, new { @class = "form-control" })<br />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactPhone, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactPhone, new { @class = "form-control", type = "tel" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactEmailAddress, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactEmailAddress, new { @class = "form-control", type = "email" })
                @Html.ValidationMessageFor(m => m.ContactEmailAddress)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactAddress1, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactAddress1, new { @class = "form-control" })<br />
                @Html.TextBoxFor(m => m.ContactAddress1, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactCity, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactCity, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactState, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactState, new { @class = "form-control", style = "width:60px;" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ContactZip, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ContactZip, new { @class = "form-control", style = "width:120px;" })
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-default" onclick="window.history.back();">Cancel</button>
            </div>
        </div>

    }
</div>
@section scripts {
    <script>
        $(document).ready(function () {

            toggleFacility($("#PresentationFacilityType").val());

            setCheckBoxes("HLCAssignedChk", $("#HLCAssigned").text());

            $("#PresentationFacilityType").change(function() {
                toggleFacility($("#PresentationFacilityType").val());
            });

            $("input[name='HLCAssignedChk']").change(function () {
                getCheckBoxes("HLCAssignedChk", "HLCAssigned");
            });

            $("#DepartmentId").change(function () {
                if ($(this).val() === "-1") {
                    $("#NewDepartment").prop("disabled", "");
                } else {
                    $("#NewDepartment").val("");
                    $("#NewDepartment").prop("disabled", "disabled");
                }
            });

            // Check validity of form on submit
            $("form").submit(function () {
                var form = $(this);
                debugger;
                // Highlight errors
                if (form.valid() === false) {
                    form.find("div.form-group").each(function () {
                        if ($(this).find("span.field-validation-error").length > 0)
                            $(this).addClass("has-error");
                        if ($(this).find("span.field-validation-valid").length > 0)
                            $(this).removeClass("has-error");
                    });
                } else {
                    // Required fields passed.  Perform special checks.
                    debugger;
                }
                return true;
            });

            function toggleFacility(ftype) {
                if (ftype === "@( (int) PresentationFacilityType.Hospital)") {
                    $("#HospitalId").prop("disabled", "");
                    $("#PracticeId").prop("disabled", "disabled");

                } else {
                    $("#HospitalId").prop("disabled", "disabled");
                    $("#PracticeId").prop("disabled", "");
                }
            }

            function getCheckBoxes(chkName, textName) {
                $("#" + textName).text("");
                var newValue = "";
                $("input[name='" + chkName + "']").each(function () {
                    if ($(this).prop("checked")) {
                        newValue += $(this).val() + ", ";
                    }
                });
                if (newValue !== "") {
                    newValue = newValue.substring(0, newValue.length - 2);
                }
                $("#" + textName).text(newValue);
            }

            function setCheckBoxes(chkName, currentValue) {
                $("input[name='" + chkName + "']").each(function () {
                    $(this).prop("checked", currentValue.includes($(this).val()));
                });
            }

        });
</script>
@Scripts.Render("~/bundles/jqueryval")
}
